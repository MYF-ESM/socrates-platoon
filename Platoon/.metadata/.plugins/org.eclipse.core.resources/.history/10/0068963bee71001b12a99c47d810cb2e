package com.platoon;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;

public class SingleTruck extends Thread implements TruckProperties,Serializable {
	protected final Role role;	
	private String licensePlate;
	private Mode mode;
	protected Status state;
	private boolean temprature,fuelLevel,seatBelt;
	//Needed only for Leading Truck
	transient private int num_of_clients =0;
	transient private Truck [] Platoon = new Truck[2];
	transient private Truck platoon_truck = null;
	transient private static ServerSocket serverSocket;
	private ObjectOutputStream outStream = null;
	private ObjectInputStream inStream = null;
	public SingleTruck(Role role)
	{
		this.role = role;		
		this.mode = mode.AUTONOMOUS;
		this.state = Status.NORMAL;
		this.temprature = false;
		this.fuelLevel = false;
		this.seatBelt = false;
	}
	
	public static void main(String[] args) {
		 //Initialization of Connections
		SingleTruck truck = null;	   
		   if(args[0].equalsIgnoreCase("L")) {
			   truck = new SingleTruck(Role.LEAD);
			   truck.setLicensePlate(args[1]);
			   Socket s = null;
			   while (true) {
				try {
					serverSocket = new ServerSocket(9130,0,InetAddress.getByName(null));
					System.out.println("Truck "+truck.getLicensePlate()+ "has started the Platoon Server");
					serverSocket.accept()
				} catch (UnknownHostException e) {
					System.out.println("Failed to Create Server Socket");
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		   }else if(args[0].equalsIgnoreCase("F")) {
			   truck = new SingleTruck(Role.FOLLOW);
			   truck.setLicensePlate(args[1]);
			   
		   }
		   
	}
	
	
	public String getLicensePlate() {
    	return licensePlate;
    }
    public void setLicensePlate(String lp) {
    	licensePlate = lp;
    }
	public Mode getMode() {
		return mode;
	}


	public void setMode(Mode mode) {
		this.mode = mode;
	}
	
	public Status getStatus() {
		return state;
	}

	public void setStatus(Status state) {
		this.state = state;
	}
	

	public void setState(Status state) {
		this.state = state;
	}

	public boolean isTemprature() {
		return temprature;
	}

	public void setTemprature(boolean temprature) {
		this.temprature = temprature;
	}

	public boolean isFuelLevel() {
		return fuelLevel;
	}

	public void setFuelLevel(boolean fuelLevel) {
		this.fuelLevel = fuelLevel;
	}

	public boolean isSeatBelt() {
		return seatBelt;
	}

	public void setSeatBelt(boolean seatBelt) {
		this.seatBelt = seatBelt;
	}

	public Role getRole() {
		return role;
	}


}

