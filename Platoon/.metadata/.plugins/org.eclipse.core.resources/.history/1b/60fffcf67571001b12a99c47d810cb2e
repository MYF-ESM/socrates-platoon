package com.platoon;
import java.io.*;
import java.net.*;

import javax.sql.rowset.spi.SyncResolver;

public class PlatoonHandler extends Thread{
	private int num_of_clients =0;
	private Truck [] Platoon = new Truck[2];
	private Truck platoon_truck = null;
	//private Socket clientSocket;
	private ServerSocket serverSocket = null;	
	private final Truck truck;
	//private ObjectOutputStream outStream = null;
	//private ObjectInputStream inStream = null;
	private Status state = Status.NORMAL;
	public PlatoonHandler(Truck truck) {
		this.truck = truck;
	}
	public void createSocket() {
		SendState t_send;
		receiveMessage t_receive;
		//If the truck is a Leader, initiate connection as a Server
		if (truck.role == Role.LEAD) {						
			try {
				serverSocket = new ServerSocket(TruckProperties.platPort);
				System.out.println("Truck "+truck.getLicensePlate()+ "has started the Platoon Server");
				while(Platoon[1] == null) {					
					Socket clientSocket = serverSocket.accept();
					t_send = new SendState(clientSocket);
					t_send.start();
					t_receive = new receiveMessage(clientSocket);
					t_receive.start();
					System.out.println("Truck :  "+ (num_of_clients++) + " has successfully connected to Platoon !");
					//Platoon[num_of_clients] = platoon_truck;
					//System.out.println("Truck: " + platoon_truck.getLicensePlate() + "was added to Platoon!");
					num_of_clients++;
				}					
			}catch(IOException e){
				System.out.println("Server failed to initiate: "+e.toString());
				createSocket();
			}
		}
		//Follower truck creates a client socket
		else if(truck.role == Role.FOLLOW) {
			try {
				Socket clientSocket = new Socket(InetAddress.getByName(TruckProperties.platoonIP), TruckProperties.platPort);
				System.out.println("Truck "+truck.getLicensePlate()+ "has successfully connected to Server !");
				//Sending First Message
				SendMessage sendmessage = new SendMessage(clientSocket);
				sendmessage.start();
				receiveState r_state = new receiveState(clientSocket);
				r_state.start();
			}catch(IOException e) {
				System.out.println("Client failed to initiate: "+e.toString());
				createSocket();
			}
		}
	}

	
	//Sending a signal to connected Client. Typically from Leading truck to a follower.
	public class SendState extends Thread{		
		Socket client;
		public SendState(Socket client) {			
			this.client = client;
		}
		public void run() {
			ObjectOutputStream outStream;
			try {
				 outStream = new ObjectOutputStream(client.getOutputStream());
				 while (true) {									
					 synchronized (state) {
						 outStream.writeObject(state);	
					 }						
					 outStream.flush();
					 //outStream.close();
					 //client.close();
					 
					 try {
						 Thread.sleep(10);
					 } catch (InterruptedException e) {					
						 e.printStackTrace();
					 }
				 }
			} catch (Exception e) {
				System.out.println("Failed to send the Status: " + state);
				e.printStackTrace();
			}
			
		}
		}
	
	// Receiving a signal from leading truck.
	// To execute 
	public class receiveState extends Thread {
		Socket client;

		public receiveState(Socket client) {
			this.client = client;
		}

		public void Run() {
			ObjectInputStream inStream;
			if (truck.role == Role.FOLLOW) {
				try {
					inStream = new ObjectInputStream(client.getInputStream());
					while (true) {
						synchronized (truck) {
							truck.setStatus((Status) inStream.readObject());
						}
						//inStream.close();
						// client.close();

						try {
							Thread.sleep(10);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				} catch (Exception e) {
					System.out.println("Failed to receive the State");
					e.printStackTrace();
				}
			}

		}

	}
	
	//Sending all the truck data to Server
	public class SendMessage extends Thread{
		Socket client;
		public SendMessage(Socket client) {
			this.client = client;
		}		
		public void Run() {
			if (truck.role == Role.FOLLOW) {
				while (true) {
				try {					
					ObjectOutputStream outStream = new ObjectOutputStream(client.getOutputStream());		
					synchronized (truck) {
						outStream.writeObject(truck);						
					}
					outStream.flush();
					outStream.close();			
					//client.close();
				} catch (Exception e) {
					System.out.println("Failed to send the Truck: " + truck.getLicensePlate() + "data");
					e.printStackTrace();
				}
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				} 
			}
			
		}
		}
		
	
	/**
	 * Receive Truck Data from Client
	 * Truck is local variable
	 * Logic should be implemented inside the function to update Platoon State
	 * */
	public class receiveMessage extends Thread{		
		Truck truck;
		Socket client;
		public receiveMessage(Socket client) {			
			truck = null;
			this.client = client;
			}
		public void Run() {
			while (true) {
				try {
					ObjectInputStream inStream = new ObjectInputStream(client.getInputStream());
					synchronized (truck) {
						truck = (Truck) inStream.readObject();	
					}
					inStream.close();						
				    //client.close();
				} catch (Exception e) {	
					System.out.println("Failed to receive the Truck Status");
					e.printStackTrace();
				}
			}		
					
		}
		}
		
	
	//Closing Connection and Releasing Resources
//	public void closeConnection() {
//		System.out.println("Closing the connection of "+truck.getLicensePlate());
//		try {
//			serverSocket.close();
//			clientSocket.close();
//			inStream.close();
//			outStream.close();
//		} catch (IOException e) {
//			System.out.println("Closing Connection Failed !");
//			e.printStackTrace();
//		}
//	}	
	public ServerSocket getServerSocket() {
		return serverSocket;
	}
	public void setServerSocket(ServerSocket serverSocket) {
		this.serverSocket = serverSocket;
	}
	
	
}
